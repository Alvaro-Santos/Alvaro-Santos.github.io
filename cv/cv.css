/*
	TBD:
	- Perfect the page when being zoomed in/out (at the time of writing: the sticky interface ends up being too big, the sidebar takes up too much of the viewport when zooming in on taller-than-wide devices, the page gets a horizontal scrollbar when zoomed in a lot, and the section titles sometimes overflow their backgrounds).
	- Ensure all animations (the ondulating colours & the spinning cube) respect users sensitive to them/respect preferences for reduced motion if appropriate: https://developer.mozilla.org/en-US/docs/Web/API/Animation#accessibility_concerns.
	- Make text slightly smaller on mobile & sticky interface slightly larger.
*/

:root {
	--accent-colour: rgb(249 243 90);
	--accent-contrast-colour: black;
	--highlight-colour: yellow;
	--underline-colour: black;
	--body-background-colour: color-mix(in srgb, white 90%, var(--accent-colour));

	--top-margin: 1.5rem;
	--left-margin: 1.75rem;
	--right-margin: max(var(--left-margin), 6vw);
	--bottom-margin: 2rem;
	
	--chrome-paper-over-left-margin: 1rem;
	--extra-vertical-margin: 1rem;

	--sidebar-width: 3.5rem;

	--border-radius: 1.5rem;
	--default-border: var(--default-border-width) black solid;
	--default-border-width: 2px;
	--default-box-shadow: 0 0 0.5rem -1px black;

	--paragraph-indent: 2ch;
	--dense-text-line-height: 1.5;
	--base-font-size: 16px;
	--quick-intro-font-size: calc(var(--base-font-size) + 1px);
	--print-font-difference: 2px;
	--print-button-font-size: clamp(1rem, 2vw, 2rem);

	--section-title-vertical-padding: 0.35rem;
	--section-title-horizontal-padding: 0.75rem;
	--inter-section-spacing: 1.75rem;
	--inter-section-block-spacing: 1rem;
	--print-button-padding: 0.5rem;

	--sqrt-3: 1.73205;	/* Chrome does not support `sqrt` */

	--colour-pickers-horizontal-margin: calc((var(--right-margin) - var(--colour-picker-diameter)) / 2);
	--colour-pickers-vertical-gap: 0.5rem;

	--colour-picker-diameter: max(2rem, 3vw);
	--colour-picker-border: 1px;

	--spinning-cube-animation-duration: 10s;
	--cube-face-side-length: calc(var(--colour-picker-diameter) * 1/var(--sqrt-3) - 2px);	/* Calculated so the diagonal of the cube is --colour-picker-diameter. The - 2px is just to ensure it doesn't look like it's overlapping the border of the .colour_picker container once it gets close enough to it while rotating. */

	--ondulating-colour-animation-duration: 5s;
}

/* No way to avoid duplicating this (`:root, @page` doesn't work) */
@page {
	--top-margin: 1.5rem;
	--bottom-margin: 2rem;

	/* There's no way to leave a margin between `#content` and the top/bottom of the page without also shortening `#sidebar`. This is not ideal and not what I wanted my CV to look like, but under these constraints the best I can do is pull the shortened sidebar a bit away from the left margin of the page & shorten the gap between it and the content. */
	--chrome-paper-over-left-margin: 1rem;
	--extra-vertical-margin: 1rem;

	--border-radius: 1.5rem;
}

* {
	margin: 0;
	border: 0;
	padding: 0;

	box-sizing: border-box;

	/*
		I doubt Windows, macOS, iOS, and maybe even Android will have DejaVu Sans (and there's no reason I chose it other than it being the default for `sans-serif` on Firefox and looking nice).
		TBD: Try to keep the font the same on all devices. I initially wanted to use https://fonts.google.com/specimen/Atkinson+Hyperlegible, but it's not a drop-in replacement (looks a bit too small compared to 'DejaVu Sans').
	;*/
	font-family: 'DejaVu Sans', sans-serif;
	/* TBD: Would like to do `text-rendering: optimizeLegibility;`, but the bit about performance issues in https://css-tricks.com/almanac/properties/t/text-rendering/ makes me scared to do it without testing on multiple devices first. */
}

*:focus {
	outline: 2px solid black;
	box-shadow: 0 0 0.5rem 2px black;
}

html {
	font-size: var(--base-font-size);
}

body {
	background-color: var(--body-background-colour);
}

a {
	text-decoration: none;
	width: fit-content;
}

a:focus {
	margin-left: -2px;

	padding-left: 2px;
	padding-right: 2px;

	box-shadow: unset;
}

em {
	font-weight: bold;
	font-style: normal;
}

button {
	cursor: pointer;
	color: var(--accent-contrast-colour);
	background-color: var(--accent-colour);
	border: var(--default-border);
	border-color: var(--accent-contrast-colour);
	border-radius: var(--border-radius);
	box-shadow: var(--default-box-shadow);
}

ul {
	list-style-position: inside;
	line-height: var(--dense-text-line-height);
}

li {
	margin-top: 0.5rem;
}

.bot_protection {
	background-color: var(--highlight-colour);
}

#sidebar {
	height: 100%;
	width: var(--sidebar-width);
	background-color: var(--accent-colour);
	
	position: fixed;
	top: 0px;
}

#content {
	margin-top: var(--top-margin);
	margin-left: calc(var(--sidebar-width) + var(--left-margin));
	margin-right: var(--right-margin);
	margin-bottom: var(--bottom-margin);
}

#noscript_message {
	/* TBD: I don't love that this is essentially hacked together by "guessing" the width of the print button, but there's not much else I can do without JavaScript. I also don't love that the margin between this message & the print button is not constant as the viewport width is varied. */
	margin-right: calc(9 * var(--print-button-font-size));
	margin-bottom: var(--top-margin);
	
	padding-top: calc(0.25rem + var(--section-title-vertical-padding));
	padding-left: calc(0.25rem + var(--section-title-horizontal-padding));
	padding-right: calc(0.25rem + var(--section-title-horizontal-padding));
	padding-bottom: calc(0.25rem + var(--section-title-vertical-padding));

	font-weight: normal;
	min-width: fit-content;
}

#header {
	margin-left: calc(var(--section-title-horizontal-padding) - 0.25rem);
}

#name {
	font-size: 2rem;
}

/* This is pretty much just a specialised `.section` (much like `#name` and `#header` are just a specialised `.section_title` and `.section`, respectively). I'm still not sure this is the approach I like best (over using the more "generic" selectors & then narrowing based on position), but I'm going with it because pretty much all the attributes within these specialised variants end up being different so I think I'd mostly just end up having to override everything inherited from the "generic" selectors anyway. */
#location_and_contacts {
	margin-top: 0.5rem;
	margin-left: 0.2rem;
}

.website_links {
	display: flex;
	flex-direction: column;
	line-height: var(--dense-text-line-height);
}

.website_logo {
	height: 1rem;
	width: 1rem;

	margin-right: 1px;
	vertical-align: text-top;
}

#linkedin_logo {
	margin-right: 2px;

	object-fit: cover;
	object-position: 0%;
}

#fixed_ui_container {
	position: fixed;
	top: var(--top-margin);
	right: var(--colour-pickers-horizontal-margin);

	display: flex;
}

#print_button {
	height: fit-content;
	padding: 0.5rem;

	font-size: var(--print-button-font-size);
}

#print_button:active {
	background-color: color-mix(in srgb, var(--accent-contrast-colour) 20%, var(--accent-colour));
}

#colour_pickers_container {
	margin-left: var(--colour-pickers-horizontal-margin);

	display: flex;
	align-items: center;
	flex-direction: column;
	row-gap: var(--colour-pickers-vertical-gap);
}

.colour_picker {
	height: var(--colour-picker-diameter);
	width: var(--colour-picker-diameter);

	border-radius: 50%;
	border: var(--default-border);
	border-width: var(--colour-picker-border);
	box-shadow: var(--default-box-shadow);

	cursor: pointer;
}

#random_colour_picker {
	display: flex;
	align-items: center;
	justify-content: center;

	background-color: var(--body-background-colour);
}

/* Inspired by, but not copied from, https://3dtransforms.desandro.com/cube */
#spinning_cube {
	height: var(--cube-face-side-length);
	width: var(--cube-face-side-length);

	transform-style: preserve-3d;

	animation-name: cube-rotation;
	animation-duration: var(--spinning-cube-animation-duration);
	animation-iteration-count: infinite;
	animation-timing-function: linear;
}

@keyframes cube-rotation {
	100% {
		transform: rotateY(360deg) rotateX(360deg);
	}
}

/* Initially I wanted to have a spinning "?" inside the cube. Ultimately I decided that "?"s on the faces of the cube looked better, but I'm leaving this logic here in case I ever want to put something inside the cube. */
/*
#spinning_cube > .content_pane:before {
	content: '?';

	font-size: var(--cube-face-side-length);
}

#spinning_cube > .content_pane {
	height: 100%;
	width: 100%;

	//Same reasoning as for .cube_pane
	position: absolute;

	display: flex;
	align-items: center;
	justify-content: center;

	animation-name: anti-rotation;
	animation-duration: var(--spinning-cube-animation-duration);
	animation-iteration-count: infinite;
	animation-timing-function: linear;
}


@keyframes anti-rotation {
	//Nothing: Rotate with the cube

	//Rotate until it disappears & back, 2x
	25% {
		transform: rotateX(-90deg) rotateY(0deg);
	}

	50% {
		transform: rotateX(-180deg) rotateY(-180deg);
	}

	75% {
		transform: rotateX(-270deg) rotateY(-180deg);
	}

	100% {
		transform: rotateX(-360deg) rotateY(-360deg);
	}

	// Rotate until it disappears & back, 3x
	16.66666% {
		transform: rotateX(-60deg) rotateY(30deg);
	}

	33.33333% {
		transform: rotateX(-120deg) rotateY(-120deg);
	}

	50% {
		transform: rotateX(-180deg) rotateY(-90deg);
	}

	66.66666% {
		transform: rotateX(-240deg) rotateY(-240deg);
	}

	83.33333% {
		transform: rotateX(-300deg) rotateY(-210deg);
	}

	100% {
		transform: rotateX(-360deg) rotateY(-360deg);
	}

	//Rotate until it disappears & back, 4x
	12.5% {
		transform: rotateX(-45deg) rotateY(45deg);
	}

	25% {
		transform: rotateX(-90deg) rotateY(-90deg);
	}

	37.5% {
		transform: rotateX(-135deg) rotateY(-45deg);
	}

	50% {
		transform: rotateX(-180deg) rotateY(-180deg);
	}

	62.5% {
		transform: rotateX(-225deg) rotateY(-135deg);
	}

	75% {
		transform: rotateX(-270deg) rotateY(-270deg);
	}

	87.5% {
		transform: rotateX(-315deg) rotateY(-225deg);
	}

	100% {
		transform: rotateX(-360deg) rotateY(-360deg);
	}

	//Keep it still for half the animation, then flip
	50% {
		transform: rotateX(-180deg) rotateY(-180deg);
	}

	//Fully rotate twice
	50% {
		transform: rotateX(-180deg) rotateY(180deg);
	}

	100% {
		transform: rotateX(-360deg) rotateY(360deg);
	}
}
*/

.cube_face:before {
	content: '?';

	font-size: var(--cube-face-side-length);
}

.cube_face {
	height: 100%;
	width: 100%;

	/* Needed so the `.cube_face`s get removed from the document flow and end up overlaying each other. */
	position: absolute;
	backface-visibility: hidden;

	display: flex;
	align-items: center;
	justify-content: center;

	border: var(--default-border);
	border-width: 1px;
}

.cube_front {
	transform: translateZ(calc(var(--cube-face-side-length) / 2));
}

.cube_back {
	transform: rotateY(180deg) translateZ(calc(var(--cube-face-side-length) / 2));
}

.cube_left {
	transform: rotateY(-90deg) translateZ(calc(var(--cube-face-side-length) / 2));
}

.cube_right {
	transform: rotateY(90deg) translateZ(calc(var(--cube-face-side-length) / 2));
}

.cube_top {
	transform: rotateX(-90deg) translateZ(calc(var(--cube-face-side-length) / 2));
}

.cube_bottom {
	transform: rotateX(90deg) translateZ(calc(var(--cube-face-side-length) / 2));
}

.ondulating_colour {
	animation-direction: alternate;
	animation-duration: var(--ondulating-colour-animation-duration);
	animation-iteration-count: infinite;
	animation-timing-function: linear;
}

/* TBD: Ideally, I'd like this to be interpolated in the Oklab colour space, as it looks the best out of all colour spaces I saw in https://raphlinus.github.io/color/2021/01/18/oklab-critique.html. There's a `color-interpolation-method` data type in CSS, but unfortunately there's no way to tell the renderer to use it when interpolating colour animations. The only viable option for the time-being might be to do the interpolation manually in JavaScript, with a fallback to pure CSS. */
@keyframes ondulating-colours-1 {
	from {
		background-color: rgb(255 50 0);
	}
	to {
		background-color: rgb(255 245 0);
	}
}

@keyframes ondulating-colours-2 {
	from {
		background-color: rgb(0 144 219);
	}
	to {
		background-color: rgb(0 206 154);
	}
}

.section {
	margin-top: var(--inter-section-spacing);
}

:nth-child(1 of .section) {
	margin-top: calc(var(--inter-section-spacing) - 0.75rem);
}

:nth-child(1 of .section) > .section_block {
	font-size: var(--quick-intro-font-size);
}

.section_title {
	padding-top: var(--section-title-vertical-padding);
	padding-left: var(--section-title-horizontal-padding);
	padding-right: var(--section-title-horizontal-padding);
	padding-bottom: var(--section-title-vertical-padding);

	font-size: 1.3rem;
	font-weight: bold;

	color: var(--accent-contrast-colour);
	background-color: var(--accent-colour);
	border-radius: var(--border-radius);
}

.section_block {
	margin-top: var(--inter-section-block-spacing);
	margin-left: calc(var(--section-title-horizontal-padding) + 0.75rem);
	margin-right: calc(var(--section-title-horizontal-padding) + 0.75rem + clamp(0rem, calc(2vw - 1rem), 2rem));
}

.section_row {
	line-height: var(--dense-text-line-height);
}

.section_row_title {
	display: inline;
	font-weight: bold;
}

.subsection_title {
	/* Morally I just want to add 0.5rem to the "existing" margin introduced by `.section_block`, but this is needed to get that behaviour due to margin collapse -- which causes the final margin to be computed as max(`margin-top` of `.subsection_title`, `margin-top` of `.break_after_fix`, `margin-top` of `.section_block`, `margin-bottom` of `.section_title`) */
	margin-top: calc(var(--inter-section-block-spacing) + 0.5rem);
	border-bottom: 1px var(--underline-colour) solid;

	font-size: 1.05rem;
	font-weight: bold;
}

#skill_section > *:nth-child(1) .subsection_title {
	margin-top: 0;
}

#skill_section ul {
	margin-left: 1rem;
}

.description_text {
	text-indent: var(--paragraph-indent);
}

/* Reasoning: Contrary to what MDN's compatibility table says, Firefox does not appear to support `break-after` or `break-before` (https://bugzilla.mozilla.org/show_bug.cgi?id=775617). */
.break_after_fix {
	break-inside: avoid;
}

.section_block {
	break-inside: avoid;
}

#skill_section .section_block {
	/* Reasoning: Re-enable breaking in section blocks inside the skills section because they essentially only contain lists, and therefore we'd otherwise force the entire lists to stay together. Could be avoided by reworking the skills section to not have these "useless" section blocks, except they're not 100% useless and removing them might not be the more pleasant alternative (e.g., the `margin-top` on `.section_block` would have to be moved only to the first `ul` -- multiple `ul`s are required due to the `break_after_fix` `div`).*/
	break-inside: auto;
}

#skill_section li {
	break-inside: avoid;
}

#misc_skills li {
	/* Reasoning: Re-enable breaking inside list items because the ones inside `#misc_skills` are big blocks of text (relative to the other list items in `#skill_section`), so it looks more aesthetic to break within than forcing a huge swath of emptiness by avoiding the break */
	break-inside: auto;
}

/*
Media queries can't use CSS variables, thus I have to use "magic" constants here. The meaning of these constants is the following:
	- `2rem` because it's the lower bound of the colour picker's diameters.
	- `0.75rem` is the minimum space I want to leave between colour pickers and horizontally adjacent elements/the viewport's right margin. It's also larger than the length the `box-shadow` can extend to at most (`0.5` rem).
		- `2 * ` because there's 2 horizontal margins.

As I want to place the colour pickers on the right margin of the viewport, the condition I have to check for is:
if right margin too small to hold colour pickers & padding (right margin < (2rem + 2 * 0.75rem)):
	activate media query
else:
	don't activate media query

At this point, all that's missing is a way to relate screen width with the right margin's width. This is simple to do with a rule of 3:
100% of viewport -- screen width
6% of viewport -- right margin

Thus, right margin = (6 * screen width)/100.
Thus, the condition that should activate the media query is (6 * screen width)/100 < (2rem + 2 * 0.75rem).
Rewriting, we get the final form: screen width < (2rem + 2 * 0.75) * 100 / 6.
*/
@media screen and ( max-width: calc((2rem + 2 * 0.75rem) * 100 / 6) ) {
	#fixed_ui_container {
		right: 1rem;	/* No special reasoning for this value other than it looking good. It intentionally causes the container to look unaligned from the right end of the section titles. */
	}

	#colour_pickers_container {
		position: absolute;
		top: calc(var(--print-button-font-size) + 2 * var(--print-button-padding) + 2 * var(--default-border-width) + var(--default-border-width) + var(--colour-picker-border) + var(--colour-pickers-vertical-gap));

		margin-left: 0;
		width: 100%;

		display: grid;
		grid-template-columns: repeat(3, 1fr);
		justify-items: center;
	}
}

/*
Limitations:
	- Firefox supports neither `orphans` nor `widows`, so there's no way to guarantee the absence of straggler lines at the top or bottom of the page when exporting to PDF. The only way to fix this is manually inserting `<br>`s (none needed yet).
	- Firefox does not support `break-after` or `break-before`, hence the `div`s with class `break_after_fix` in the HTML.
	- Chrome does not support `-webkit-box-decoration-break: clone` in full -- it only works for `display: inline` elements (per MDN's compatibility table), which `#content` is not and cannot be (at least not without significantly changing everything else). This coupled with `@page`'s limitations (several features are not yet implemented on any browser, per MDN) means the only way to get a vertical padding on the printed pages is with `@page`'s `margin` rules, which ruin the aesthetic I was going for but which I managed to somewhat salvage by moving the sidebar around.
	- Chrome adds extra space to `li::marker` when using `list-style-position: inside`, and there are few ways to style the marker (https://css-tricks.com/everything-you-need-to-know-about-the-gap-after-the-list-marker/). Per the web page, the most reasonable workaround is to change the list marker to be a UTF-8 bullet character followed by a space.
*/
@media print {
	html {
		font-size: calc(var(--base-font-size) - var(--print-font-difference));
	}

	body {
		print-color-adjust: exact;
		-webkit-print-color-adjust: exact;

		background-color: white;
	}

	button, #fixed_ui_container, #noscript {
		display: none;
	}

	#content {
		margin-top: 0;
		margin-bottom: 0;
	}

	:nth-child(1 of .section) > .section_block {
		font-size: calc(var(--quick-intro-font-size) - var(--print-font-difference));
	}

	.section_block {
		/* Morally what I actually want to do here is just to remove the `clamp` from the non-print `.section_block` styling. */
		margin-right: calc(var(--section-title-horizontal-padding) + 0.75rem);
	}
}

@page {
	size: A4 portrait;
	margin: 0;
}

/* Chrome (Safari, Edge) only */
@supports (-webkit-print-color-adjust: exact) {
	.firefox_print_only {
		display: none;
	}

	li::marker {
		content: '• ';
		font-size: 1.1rem;
	}

	@media print {
		#sidebar {
			border-radius: var(--border-radius);
		}

		#content {
			margin-left: calc(var(--sidebar-width) + var(--left-margin) - var(--chrome-paper-over-left-margin));

			/* On Chrome this only applies to the 1st page. Needed because otherwise my name looks too close to the top edge of the content. */
			padding-top: 1rem;
		}
	}

	@page {
		margin-top: calc(var(--top-margin) + var(--extra-vertical-margin));
		margin-left: var(--chrome-paper-over-left-margin);
		margin-bottom: calc(var(--bottom-margin) + var(--extra-vertical-margin));
	}
}

/* Firefox only */
@supports not (-webkit-print-color-adjust: exact) {
	@media screen {
		.firefox_print_only {
			display: none;
		}
	}

	@media print {
		#content {
			padding-top: calc(var(--top-margin) + var(--extra-vertical-margin));
			padding-bottom: calc(var(--bottom-margin) + var(--extra-vertical-margin));

			box-decoration-break: clone;
		}
	}
}
